19.01.22
The most suitable way to define objects is using object literals.

const myObject = {
  property: 'Value!',
  otherProperty: 77,
  "obnoxious property": function() {
    // do stuff!
 }
}
One can access information using the dot notation and the bracket notation.
/.dot notation: myObject.property 
//bracket notation myObject['obnoxious proeprty']

Object Constructors
Used to duplicate specific type of objects such as inventory items.
It is mainly a function using the 'this'Key word.
All objects in JavaScript have a prototype. Stated simply, the prototype is another object that the original object inherits from, which is to say, the original object has access to all of its prototype’s methods and properties.
It is important to know that a property is simply a variable defined in a function.

wasnt able to study object constructors today. Took a break


21/01/21
 All objects in JavaScript have a prototype. Stated simply, the prototype is another object 
 that the original object inherits from, which is to say, the original object has access to all of its prototype’s methods and properties.
 objects are sometimes refered to other instances.
 There are two interelated concepts in Javascript: Prototype property and prottype attribute.
 
 PROTOTYPE property
 -This PROPERTY IS EMPTY by default.
 -you can attatch property when you want to implement inheritance.
 -This property is not enumerable ie it isnt accessible in a for in loop.
 The prototype property is primarily used for inheritance-You add methods and properties on a function's prototype property to make those methods and properties available to instances
 in that function.

 Example 
 //js prototypes example.
 function printStuff (myDocuments) {
   this.documents = myDocuments;
    
 }
/// We add the print () method to PrintStuff prototype property so that other instances (objects) can inherit it
printStuff.prototype.print = function() {
  console.log(this.documents);
}

//Create a new object with the PrintStuff () constructor, thus allowing this new object to inherit PrintStuff's properties and methods.

const newObject = new printStuff ('I am a new object and i can print');

// newObj inherited all the properties and methods, including the print method, from the PrintStuff function. Now newObj can call print directly, even though we never created a print () method on it

newObject.print();


The second concept with prototype in JavaScript is the prototype attribute. Think of the prototype attribute as a characteristic of the object; 
this characteristic tells us the object’s “parent”. 
In simple terms: An object’s prototype attribute points to the object’s “parent”—the object it inherited its properties from. 
The prototype attribute is normally referred to as the prototype object, and it is set automatically when you create a new object.
To expound on this: Every object inherits properties from some other object, and it is this other object that is the object’s prototype 
attribute or “parent.” (You can think of the prototype attribute as the lineage or the parent). In the example code above, newObj‘s 
prototype is PrintStuff.prototype.
Note: All objects have attributes just like object properties have attributes. And the object attributes are prototype, class, 
and extensible attributes. It is this prototype attribute that we are discussing in this second example.


A constructor is a function used for initializing new objects.
You use the keyword new to call the constructor.

All objects created with object literals and with the Object constructor inherits from Object.prototype. 
Therefore, Object.prototype is the prototype attribute (or the prototype object) of all objects created with new Object () or with {}. 
Object.prototype itself does not inherit any methods or properties from any other object.




If you’re using constructors to make your objects it is best to define functions on the prototype of that object. 
Doing so means that a single instance of each function will be shared between all of the Student objects. 
If we declare the function directly in the constructor, like we did when they were first introduced, 
that function would be duplicated every time a new Student is created. In this example, 
that wouldn’t really matter much, but in a project that is creating thousands of objects, it really can make a difference.